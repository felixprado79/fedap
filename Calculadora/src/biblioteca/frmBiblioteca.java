/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package biblioteca;

import javax.swing.table.DefaultTableModel;
import clases.*;
import java.awt.HeadlessException;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author Usuario
 */
public class frmBiblioteca extends javax.swing.JFrame {

    /**
     * Creates new form frmBiblioteca
     */
    public frmBiblioteca() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        mostrardatosEstudiante();
        mostrardatosFuncionario();
        mostrardatosProfesor();
        mostrardatosAutor();
        mostrardatosLibro();
        SpinnerNumberModel nmLibros = new SpinnerNumberModel();
        nmLibros.setMinimum(1);
        nmLibros.setValue(1);
        spnLibrosProducidosAutor.setModel(nmLibros);

        SpinnerNumberModel nmProfesor = new SpinnerNumberModel();
        nmProfesor.setMinimum(1);
        nmProfesor.setValue(1);
        spnCantidadCursosProfesor.setModel(nmProfesor);

        SpinnerNumberModel nmLibrosUniversdidad = new SpinnerNumberModel();
        nmLibrosUniversdidad.setMinimum(1);
        nmLibrosUniversdidad.setValue(1);
        spnLibrosUniversidad.setModel(nmLibrosUniversdidad);

        SpinnerNumberModel nmLibrosDisponibles = new SpinnerNumberModel();
        nmLibrosDisponibles.setMinimum(1);
        nmLibrosDisponibles.setValue(1);
        spnLibrosUniversidad.setModel(nmLibrosDisponibles);

    }

    public static ArrayList<estudiante> listaEstudiantes = new ArrayList<estudiante>();
    public static ArrayList<funcionario> listaFuncionarios = new ArrayList<funcionario>();
    public static ArrayList<profesor> listaProfesores = new ArrayList<profesor>();
    public static ArrayList<autor> listaAutor = new ArrayList<autor>();
    public static ArrayList<libro> listaLibros = new ArrayList<libro>();
    public static ArrayList<Object> listaLibrosPrestados = new ArrayList<Object>();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtpBiblioteca = new javax.swing.JTabbedPane();
        pnlEstudiante = new javax.swing.JPanel();
        lblCarnetEstudiante = new javax.swing.JLabel();
        lblNombreEstudiante = new javax.swing.JLabel();
        lblApellidoEstudiante = new javax.swing.JLabel();
        lblEmailEstudiante = new javax.swing.JLabel();
        lblTelefonoEstudiante = new javax.swing.JLabel();
        lblSedeEstudiante = new javax.swing.JLabel();
        txt_ApellidoEstudiante = new javax.swing.JTextField();
        txt_NombreEstudiante = new javax.swing.JTextField();
        txt_EmailEstudiante = new javax.swing.JTextField();
        txtSedeEstudiante = new javax.swing.JTextField();
        lblCarrera = new javax.swing.JLabel();
        txtCarrera = new javax.swing.JTextField();
        chbActivo = new javax.swing.JCheckBox();
        btnGuardar = new javax.swing.JButton();
        txtTelefonoEstudiante = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbEstudiante = new javax.swing.JTable();
        txtCarnet = new javax.swing.JFormattedTextField();
        btnEliminar = new javax.swing.JButton();
        pnlFuncionario = new javax.swing.JPanel();
        lblSedeFuncionario = new javax.swing.JLabel();
        lblTelefonoFuncionario = new javax.swing.JLabel();
        lblEmailFuncionario = new javax.swing.JLabel();
        lblApellidosFuncionario = new javax.swing.JLabel();
        lblNombreFuncionario = new javax.swing.JLabel();
        txtIDFuncionario = new javax.swing.JLabel();
        txtSedeEmpleado = new javax.swing.JTextField();
        txtEmailEmpleado = new javax.swing.JTextField();
        txtApellidosEmpleado = new javax.swing.JTextField();
        txtNombreEmpleado = new javax.swing.JTextField();
        lblPuestoFuncionario = new javax.swing.JLabel();
        lblDepartamentoFuncionario = new javax.swing.JLabel();
        txtPuestoEmpleado = new javax.swing.JTextField();
        txtDepartamentoEmpleado = new javax.swing.JTextField();
        txtIDEmpleado = new javax.swing.JFormattedTextField();
        txtTelefonoEmpleado = new javax.swing.JFormattedTextField();
        btnGuardarEmpleado = new javax.swing.JButton();
        btnEliminarEmpleado = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbEmpleado = new javax.swing.JTable();
        pnlProfesor = new javax.swing.JPanel();
        lblSedeProfesor = new javax.swing.JLabel();
        lblTelefonoProfesor = new javax.swing.JLabel();
        lblEmailProfesor = new javax.swing.JLabel();
        lblApellidosProfesor = new javax.swing.JLabel();
        lblNombreProfesor = new javax.swing.JLabel();
        lblIDMarcaProfesor = new javax.swing.JLabel();
        txtCorreoProfesor = new javax.swing.JTextField();
        txtApellidosProfesor = new javax.swing.JTextField();
        txtNombreProfesor = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbProfesor = new javax.swing.JTable();
        txtIDMarcaProfesor = new javax.swing.JFormattedTextField();
        txtTelefonoProfesor = new javax.swing.JFormattedTextField();
        lblCantidadCursos = new javax.swing.JLabel();
        txtSedeProfesor = new javax.swing.JTextField();
        btnGuardarProfesor = new javax.swing.JButton();
        btnEliminarProfesor = new javax.swing.JButton();
        spnCantidadCursosProfesor = new javax.swing.JSpinner();
        pnlAutor = new javax.swing.JPanel();
        lblNacionalidadAutor = new javax.swing.JLabel();
        lblSedeAutor = new javax.swing.JLabel();
        lblTelefonoAutor = new javax.swing.JLabel();
        lblEmailAutor = new javax.swing.JLabel();
        lblApellidosAutor = new javax.swing.JLabel();
        lblNombreAutor = new javax.swing.JLabel();
        txtNombreAutor = new javax.swing.JTextField();
        txtApellidosAutor = new javax.swing.JTextField();
        txtEmailAutor = new javax.swing.JTextField();
        txtSedeAutor = new javax.swing.JTextField();
        txtNacionalidadAutor = new javax.swing.JTextField();
        lblVivoAutor = new javax.swing.JLabel();
        lblLibrosProducidosAutor = new javax.swing.JLabel();
        txtTelefonoAutor = new javax.swing.JFormattedTextField();
        chbVivoAutor = new javax.swing.JCheckBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbAutor = new javax.swing.JTable();
        btnGuardarAutor = new javax.swing.JButton();
        spnLibrosProducidosAutor = new javax.swing.JSpinner();
        pnlLibro = new javax.swing.JPanel();
        cmbAutores = new javax.swing.JComboBox<>();
        lblNombreLibro = new javax.swing.JLabel();
        lblAutorLibro = new javax.swing.JLabel();
        lblAñoLibro = new javax.swing.JLabel();
        lblEditorialLibro = new javax.swing.JLabel();
        lblCantidadLibro = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbLibro = new javax.swing.JTable();
        btnGuardarLibro = new javax.swing.JButton();
        txtNombreLibro = new javax.swing.JTextField();
        txtAñoPublicacionLibro = new javax.swing.JFormattedTextField();
        txtEditorialLibro = new javax.swing.JTextField();
        spnLibrosUniversidad = new javax.swing.JSpinner();
        pnlPrestamoDevolucion = new javax.swing.JPanel();
        cmbLibros = new javax.swing.JComboBox<>();
        lblLibrosPrestamo = new javax.swing.JLabel();
        lblSolicitantePrestamo = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        btnSolicitarLibro = new javax.swing.JButton();
        txtIDPrestamo = new javax.swing.JFormattedTextField();
        lbIDDevolucion = new javax.swing.JLabel();
        txtIDDevolucion = new javax.swing.JFormattedTextField();
        btnBuscarPrestados = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        tbLibrosPrestados = new javax.swing.JTable();
        lblLibroDevolucion = new javax.swing.JLabel();
        txtLibroDevolver = new javax.swing.JTextField();
        btnDevolver = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblCarnetEstudiante.setText("Carnet:");

        lblNombreEstudiante.setText("Nombre:");

        lblApellidoEstudiante.setText("Apellidos:");

        lblEmailEstudiante.setText("Email:");

        lblTelefonoEstudiante.setText("Telefono:");

        lblSedeEstudiante.setText("Sede:");

        lblCarrera.setText("Carrera:");

        chbActivo.setText("Activo");

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        try {
            txtTelefonoEstudiante.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        tbEstudiante.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tbEstudiante.setEnabled(false);
        jScrollPane1.setViewportView(tbEstudiante);

        try {
            txtCarnet.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#-####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlEstudianteLayout = new javax.swing.GroupLayout(pnlEstudiante);
        pnlEstudiante.setLayout(pnlEstudianteLayout);
        pnlEstudianteLayout.setHorizontalGroup(
            pnlEstudianteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEstudianteLayout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addGroup(pnlEstudianteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSedeEstudiante)
                    .addComponent(lblTelefonoEstudiante)
                    .addComponent(lblEmailEstudiante)
                    .addComponent(lblNombreEstudiante)
                    .addComponent(lblApellidoEstudiante)
                    .addComponent(lblCarnetEstudiante)
                    .addComponent(lblCarrera))
                .addGap(36, 36, 36)
                .addGroup(pnlEstudianteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_ApellidoEstudiante, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(txt_NombreEstudiante, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(txt_EmailEstudiante, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(txtSedeEstudiante, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(txtCarrera)
                    .addComponent(chbActivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtTelefonoEstudiante)
                    .addComponent(txtCarnet))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGuardar)
                .addGap(18, 18, 18)
                .addComponent(btnEliminar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnlEstudianteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlEstudianteLayout.setVerticalGroup(
            pnlEstudianteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEstudianteLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(pnlEstudianteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCarnetEstudiante)
                    .addComponent(txtCarnet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlEstudianteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblNombreEstudiante)
                    .addComponent(txt_NombreEstudiante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlEstudianteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblApellidoEstudiante)
                    .addComponent(txt_ApellidoEstudiante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlEstudianteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmailEstudiante)
                    .addComponent(txt_EmailEstudiante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlEstudianteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTelefonoEstudiante)
                    .addComponent(txtTelefonoEstudiante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlEstudianteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSedeEstudiante)
                    .addComponent(txtSedeEstudiante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlEstudianteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCarrera)
                    .addComponent(txtCarrera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlEstudianteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chbActivo)
                    .addComponent(btnGuardar)
                    .addComponent(btnEliminar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(104, Short.MAX_VALUE))
        );

        jtpBiblioteca.addTab("Estudiante", pnlEstudiante);

        lblSedeFuncionario.setText("Sede:");

        lblTelefonoFuncionario.setText("Telefono:");

        lblEmailFuncionario.setText("Email:");

        lblApellidosFuncionario.setText("Apellidos:");

        lblNombreFuncionario.setText("Nombre:");

        txtIDFuncionario.setText("ID Empleado:");

        lblPuestoFuncionario.setText("Puesto:");

        lblDepartamentoFuncionario.setText("Departamento:");

        try {
            txtIDEmpleado.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#-####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        try {
            txtTelefonoEmpleado.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        btnGuardarEmpleado.setText("Guardar");
        btnGuardarEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarEmpleadoActionPerformed(evt);
            }
        });

        btnEliminarEmpleado.setText("Eliminar");
        btnEliminarEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarEmpleadoActionPerformed(evt);
            }
        });

        tbEmpleado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tbEmpleado.setEnabled(false);
        jScrollPane2.setViewportView(tbEmpleado);

        javax.swing.GroupLayout pnlFuncionarioLayout = new javax.swing.GroupLayout(pnlFuncionario);
        pnlFuncionario.setLayout(pnlFuncionarioLayout);
        pnlFuncionarioLayout.setHorizontalGroup(
            pnlFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFuncionarioLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnGuardarEmpleado)
                .addGap(68, 68, 68)
                .addComponent(btnEliminarEmpleado)
                .addGap(48, 48, 48))
            .addGroup(pnlFuncionarioLayout.createSequentialGroup()
                .addGroup(pnlFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFuncionarioLayout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addGroup(pnlFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPuestoFuncionario)
                            .addComponent(lblSedeFuncionario)
                            .addComponent(lblTelefonoFuncionario)
                            .addComponent(lblEmailFuncionario)
                            .addComponent(lblApellidosFuncionario)
                            .addComponent(lblNombreFuncionario)
                            .addComponent(txtIDFuncionario)
                            .addComponent(lblDepartamentoFuncionario))
                        .addGap(44, 44, 44)
                        .addGroup(pnlFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtPuestoEmpleado, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSedeEmpleado, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTelefonoEmpleado, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtEmailEmpleado, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtApellidosEmpleado, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNombreEmpleado, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtIDEmpleado, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDepartamentoEmpleado))
                        .addGap(264, 264, 264))
                    .addGroup(pnlFuncionarioLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25))
        );
        pnlFuncionarioLayout.setVerticalGroup(
            pnlFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFuncionarioLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(pnlFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIDFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIDEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(pnlFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombreEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNombreFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtApellidosEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblApellidosFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEmailEmpleado)
                    .addComponent(lblEmailFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTelefonoFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTelefonoEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(pnlFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSedeEmpleado)
                    .addComponent(lblSedeFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPuestoFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPuestoEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDepartamentoEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDepartamentoFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardarEmpleado)
                    .addComponent(btnEliminarEmpleado))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        jtpBiblioteca.addTab("Funcionario", pnlFuncionario);

        lblSedeProfesor.setText("Sede:");

        lblTelefonoProfesor.setText("Telefono:");

        lblEmailProfesor.setText("Email:");

        lblApellidosProfesor.setText("Apellidos:");

        lblNombreProfesor.setText("Nombre:");

        lblIDMarcaProfesor.setText("ID Marca:");

        tbProfesor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tbProfesor.setEnabled(false);
        jScrollPane3.setViewportView(tbProfesor);

        try {
            txtIDMarcaProfesor.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#-####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        try {
            txtTelefonoProfesor.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        lblCantidadCursos.setText("Cantidad cursos:");

        btnGuardarProfesor.setText("Guardar");
        btnGuardarProfesor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarProfesorActionPerformed(evt);
            }
        });

        btnEliminarProfesor.setText("Eliminar");
        btnEliminarProfesor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarProfesorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlProfesorLayout = new javax.swing.GroupLayout(pnlProfesor);
        pnlProfesor.setLayout(pnlProfesorLayout);
        pnlProfesorLayout.setHorizontalGroup(
            pnlProfesorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProfesorLayout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addGroup(pnlProfesorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCantidadCursos)
                    .addComponent(lblSedeProfesor)
                    .addComponent(lblTelefonoProfesor)
                    .addComponent(lblEmailProfesor)
                    .addComponent(lblApellidosProfesor)
                    .addComponent(lblNombreProfesor)
                    .addComponent(lblIDMarcaProfesor))
                .addGap(49, 49, 49)
                .addGroup(pnlProfesorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtIDMarcaProfesor)
                    .addComponent(txtNombreProfesor, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(txtTelefonoProfesor)
                    .addComponent(txtApellidosProfesor, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(txtCorreoProfesor, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(txtSedeProfesor, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(spnCantidadCursosProfesor))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlProfesorLayout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addGroup(pnlProfesorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlProfesorLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlProfesorLayout.createSequentialGroup()
                        .addComponent(btnGuardarProfesor)
                        .addGap(49, 49, 49)
                        .addComponent(btnEliminarProfesor)
                        .addGap(72, 72, 72))))
        );
        pnlProfesorLayout.setVerticalGroup(
            pnlProfesorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProfesorLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(pnlProfesorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIDMarcaProfesor)
                    .addComponent(txtIDMarcaProfesor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlProfesorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNombreProfesor)
                    .addComponent(txtNombreProfesor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlProfesorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblApellidosProfesor)
                    .addComponent(txtApellidosProfesor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlProfesorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmailProfesor)
                    .addComponent(txtCorreoProfesor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlProfesorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTelefonoProfesor)
                    .addComponent(txtTelefonoProfesor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlProfesorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSedeProfesor)
                    .addComponent(txtSedeProfesor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlProfesorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCantidadCursos)
                    .addComponent(spnCantidadCursosProfesor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addGroup(pnlProfesorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardarProfesor)
                    .addComponent(btnEliminarProfesor))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63))
        );

        jtpBiblioteca.addTab("Profesor", pnlProfesor);

        lblNacionalidadAutor.setText("Nacionalidad:");

        lblSedeAutor.setText("Sede:");

        lblTelefonoAutor.setText("Telefono:");

        lblEmailAutor.setText("Email:");

        lblApellidosAutor.setText("Apellidos:");

        lblNombreAutor.setText("Nombre:");

        lblVivoAutor.setText("Vivo:");

        lblLibrosProducidosAutor.setText("Libros producidos:");

        try {
            txtTelefonoAutor.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        tbAutor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tbAutor.setEnabled(false);
        jScrollPane4.setViewportView(tbAutor);

        btnGuardarAutor.setText("Guardar");
        btnGuardarAutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarAutorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAutorLayout = new javax.swing.GroupLayout(pnlAutor);
        pnlAutor.setLayout(pnlAutorLayout);
        pnlAutorLayout.setHorizontalGroup(
            pnlAutorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAutorLayout.createSequentialGroup()
                .addGroup(pnlAutorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAutorLayout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addGroup(pnlAutorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblLibrosProducidosAutor)
                            .addComponent(lblVivoAutor)
                            .addComponent(lblNacionalidadAutor)
                            .addComponent(lblSedeAutor)
                            .addComponent(lblTelefonoAutor)
                            .addComponent(lblEmailAutor)
                            .addComponent(lblApellidosAutor)
                            .addComponent(lblNombreAutor))
                        .addGap(35, 35, 35)
                        .addGroup(pnlAutorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNacionalidadAutor, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(txtTelefonoAutor)
                            .addComponent(txtSedeAutor, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(txtApellidosAutor, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(txtNombreAutor, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(txtEmailAutor, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(chbVivoAutor)
                            .addComponent(spnLibrosProducidosAutor)))
                    .addGroup(pnlAutorLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAutorLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnGuardarAutor)
                .addGap(165, 165, 165))
        );
        pnlAutorLayout.setVerticalGroup(
            pnlAutorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAutorLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(pnlAutorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombreAutor)
                    .addComponent(txtNombreAutor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlAutorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblApellidosAutor)
                    .addComponent(txtApellidosAutor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlAutorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmailAutor)
                    .addComponent(txtEmailAutor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlAutorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTelefonoAutor)
                    .addComponent(txtTelefonoAutor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlAutorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSedeAutor)
                    .addComponent(txtSedeAutor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlAutorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNacionalidadAutor)
                    .addComponent(txtNacionalidadAutor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlAutorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblVivoAutor)
                    .addComponent(chbVivoAutor))
                .addGap(20, 20, 20)
                .addGroup(pnlAutorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLibrosProducidosAutor)
                    .addComponent(spnLibrosProducidosAutor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addComponent(btnGuardarAutor)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        jtpBiblioteca.addTab("Autor", pnlAutor);

        lblNombreLibro.setText("Nombre:");

        lblAutorLibro.setText("Autor:");

        lblAñoLibro.setText("Año de publicación:");

        lblEditorialLibro.setText("Editorial:");

        lblCantidadLibro.setText("Cantidad libros de la Universidad:");

        tbLibro.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tbLibro.setEnabled(false);
        jScrollPane5.setViewportView(tbLibro);

        btnGuardarLibro.setText("Guardar");
        btnGuardarLibro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarLibroActionPerformed(evt);
            }
        });

        try {
            txtAñoPublicacionLibro.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        javax.swing.GroupLayout pnlLibroLayout = new javax.swing.GroupLayout(pnlLibro);
        pnlLibro.setLayout(pnlLibroLayout);
        pnlLibroLayout.setHorizontalGroup(
            pnlLibroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLibroLayout.createSequentialGroup()
                .addGroup(pnlLibroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlLibroLayout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addGroup(pnlLibroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCantidadLibro)
                            .addGroup(pnlLibroLayout.createSequentialGroup()
                                .addGroup(pnlLibroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblAutorLibro)
                                    .addComponent(lblNombreLibro)
                                    .addComponent(lblAñoLibro)
                                    .addComponent(lblEditorialLibro))
                                .addGap(104, 104, 104)
                                .addGroup(pnlLibroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(spnLibrosUniversidad, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                    .addComponent(cmbAutores, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtNombreLibro)
                                    .addComponent(txtAñoPublicacionLibro)
                                    .addComponent(txtEditorialLibro)))))
                    .addGroup(pnlLibroLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLibroLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnGuardarLibro)
                .addGap(168, 168, 168))
        );
        pnlLibroLayout.setVerticalGroup(
            pnlLibroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLibroLayout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(pnlLibroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombreLibro)
                    .addComponent(txtNombreLibro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(pnlLibroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAutorLibro)
                    .addComponent(cmbAutores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlLibroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAñoLibro)
                    .addComponent(txtAñoPublicacionLibro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(pnlLibroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEditorialLibro)
                    .addComponent(txtEditorialLibro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlLibroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCantidadLibro)
                    .addComponent(spnLibrosUniversidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(89, 89, 89)
                .addComponent(btnGuardarLibro)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(75, Short.MAX_VALUE))
        );

        jtpBiblioteca.addTab("Libro", pnlLibro);

        lblLibrosPrestamo.setText("Libros de la Universidad:");

        lblSolicitantePrestamo.setText("Identificación del solicitante:");

        btnSolicitarLibro.setText("Solicitar libro prestado");
        btnSolicitarLibro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSolicitarLibroActionPerformed(evt);
            }
        });

        try {
            txtIDPrestamo.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#-####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtIDPrestamo.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        lbIDDevolucion.setText("Identificación:");

        try {
            txtIDDevolucion.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#-####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtIDDevolucion.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        btnBuscarPrestados.setText("Buscar libros prestados");
        btnBuscarPrestados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPrestadosActionPerformed(evt);
            }
        });

        tbLibrosPrestados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tbLibrosPrestados.setEnabled(false);
        jScrollPane6.setViewportView(tbLibrosPrestados);

        lblLibroDevolucion.setText("N° de libro a devolver:");

        txtLibroDevolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLibroDevolverActionPerformed(evt);
            }
        });
        txtLibroDevolver.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtLibroDevolverKeyTyped(evt);
            }
        });

        btnDevolver.setText("Devolver");
        btnDevolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDevolverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlPrestamoDevolucionLayout = new javax.swing.GroupLayout(pnlPrestamoDevolucion);
        pnlPrestamoDevolucion.setLayout(pnlPrestamoDevolucionLayout);
        pnlPrestamoDevolucionLayout.setHorizontalGroup(
            pnlPrestamoDevolucionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPrestamoDevolucionLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSolicitarLibro)
                .addGap(105, 105, 105))
            .addGroup(pnlPrestamoDevolucionLayout.createSequentialGroup()
                .addGroup(pnlPrestamoDevolucionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPrestamoDevolucionLayout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addGroup(pnlPrestamoDevolucionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSolicitantePrestamo)
                            .addComponent(lblLibrosPrestamo))
                        .addGap(18, 18, 18)
                        .addGroup(pnlPrestamoDevolucionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbLibros, 0, 130, Short.MAX_VALUE)
                            .addComponent(txtIDPrestamo)))
                    .addGroup(pnlPrestamoDevolucionLayout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(lbIDDevolucion)
                        .addGap(66, 66, 66)
                        .addComponent(txtIDDevolucion)))
                .addGap(53, 53, 53)
                .addComponent(btnBuscarPrestados)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnlPrestamoDevolucionLayout.createSequentialGroup()
                .addGroup(pnlPrestamoDevolucionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPrestamoDevolucionLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlPrestamoDevolucionLayout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(lblLibroDevolucion)
                        .addGap(29, 29, 29)
                        .addComponent(txtLibroDevolver, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addComponent(btnDevolver)))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        pnlPrestamoDevolucionLayout.setVerticalGroup(
            pnlPrestamoDevolucionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPrestamoDevolucionLayout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(pnlPrestamoDevolucionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbLibros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLibrosPrestamo))
                .addGap(38, 38, 38)
                .addGroup(pnlPrestamoDevolucionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSolicitantePrestamo)
                    .addComponent(txtIDPrestamo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(btnSolicitarLibro)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(pnlPrestamoDevolucionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbIDDevolucion)
                    .addComponent(txtIDDevolucion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarPrestados))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(pnlPrestamoDevolucionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLibroDevolucion)
                    .addComponent(txtLibroDevolver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDevolver))
                .addContainerGap(117, Short.MAX_VALUE))
        );

        jtpBiblioteca.addTab("Prestamo y Devoluciones", pnlPrestamoDevolucion);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtpBiblioteca)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtpBiblioteca)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        try {
            guardarEstudiante();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        try {
            eliminarEstudiante();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnGuardarEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarEmpleadoActionPerformed
        // TODO add your handling code here:
        try {
            guardarFuncionario();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }
    }//GEN-LAST:event_btnGuardarEmpleadoActionPerformed

    private void btnEliminarEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarEmpleadoActionPerformed
        // TODO add your handling code here:
        try {
            eliminarFuncionario();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }
    }//GEN-LAST:event_btnEliminarEmpleadoActionPerformed

    private void btnGuardarProfesorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarProfesorActionPerformed
        // TODO add your handling code here:
        try {
            guardarProfesor();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }
    }//GEN-LAST:event_btnGuardarProfesorActionPerformed

    private void btnEliminarProfesorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarProfesorActionPerformed
        // TODO add your handling code here:
        try {
            eliminarProfesor();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }
    }//GEN-LAST:event_btnEliminarProfesorActionPerformed

    private void btnGuardarAutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarAutorActionPerformed
        // TODO add your handling code here:
        try {
            guardarAutor();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }
    }//GEN-LAST:event_btnGuardarAutorActionPerformed

    private void btnGuardarLibroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarLibroActionPerformed
        // TODO add your handling code here:
        try {
            guardarLibro();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }
    }//GEN-LAST:event_btnGuardarLibroActionPerformed

    private void btnSolicitarLibroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSolicitarLibroActionPerformed
        // TODO add your handling code here:
        try {
            guardarLibroPrestado();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }

    }//GEN-LAST:event_btnSolicitarLibroActionPerformed

    private void btnBuscarPrestadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPrestadosActionPerformed
        // TODO add your handling code here:
        try {
            buscarLibrosPrestado();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }
    }//GEN-LAST:event_btnBuscarPrestadosActionPerformed

    private void btnDevolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDevolverActionPerformed
        // TODO add your handling code here:
        try {
            devolverLibroPrestado();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }
    }//GEN-LAST:event_btnDevolverActionPerformed

    private void txtLibroDevolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLibroDevolverActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLibroDevolverActionPerformed

    private void txtLibroDevolverKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLibroDevolverKeyTyped
        // TODO add your handling code here:
        try {
            char car = evt.getKeyChar();
            if (txtLibroDevolver.getText().length() >= 6) {
                evt.consume();
            }
            if ((car < '0' || car > '9')) {
                evt.consume();
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_txtLibroDevolverKeyTyped
    
    public void devolverLibroPrestado() {
        try {
            int usuario;
            usuario = verificarUsuarioExistente(Integer.parseInt(txtIDDevolucion.getText().replaceAll("-", "")));
            switch (usuario) {
                case 1:
                    Iterator<estudiante> lstEstudiante = listaEstudiantes.iterator();
                    while (lstEstudiante.hasNext()) {
                        estudiante estdiante;
                        estdiante = lstEstudiante.next();
                        if (Integer.parseInt(estdiante.getCarnet()) == Integer.parseInt(txtIDDevolucion.getText().replaceAll("-", ""))) {
                            if (estdiante.listaLibroEstudiante.size() >= Integer.parseInt(txtLibroDevolver.getText()) - 1) {
                                String libroDevolver;
                                libroDevolver = tbLibrosPrestados.getValueAt(Integer.parseInt(txtLibroDevolver.getText()) - 1, 4).toString();
                                Iterator<libro> li = listaLibros.iterator();
                                while (li.hasNext()) {
                                    libro datosLibro;
                                    datosLibro = li.next();
                                    if (datosLibro.getNombrelibro().equals(libroDevolver)) {
                                        datosLibro.setClibrosdisponibles(datosLibro.getClibrosdisponibles() + 1);
                                        mostrardatosLibro();
                                        break;
                                    }
                                }
                                estdiante.listaLibroEstudiante.remove(Integer.parseInt(txtLibroDevolver.getText()) - 1);
                                JOptionPane.showMessageDialog(null, "Libro devuelto");
                                buscarLibrosPrestado();
                                txtLibroDevolver.setText("");
                            } else {
                                JOptionPane.showMessageDialog(null, "Libro no existente");
                            }
                            break;
                        }
                    }
                    break;

                case 2:
                    Iterator<funcionario> lstFuncionarios = listaFuncionarios.iterator();
                    while (lstFuncionarios.hasNext()) {
                        funcionario funcionarios;
                        funcionarios = lstFuncionarios.next();
                        if (Integer.parseInt(funcionarios.getNumempleado()) == Integer.parseInt(txtIDDevolucion.getText().replaceAll("-", ""))) {
                            if (funcionarios.listaLibroFuncionario.size() >= Integer.parseInt(txtLibroDevolver.getText()) - 1) {
                                String libroDevolver;
                                libroDevolver = tbLibrosPrestados.getValueAt(Integer.parseInt(txtLibroDevolver.getText()) - 1, 4).toString();
                                Iterator<libro> li = listaLibros.iterator();
                                while (li.hasNext()) {
                                    libro datosLibro;
                                    datosLibro = li.next();
                                    if (datosLibro.getNombrelibro().equals(libroDevolver)) {
                                        datosLibro.setClibrosdisponibles(datosLibro.getClibrosdisponibles() + 1);
                                        mostrardatosLibro();
                                        break;
                                    }
                                }
                                funcionarios.listaLibroFuncionario.remove(Integer.parseInt(txtLibroDevolver.getText()) - 1);
                                JOptionPane.showMessageDialog(null, "Libro devuelto");
                                buscarLibrosPrestado();
                            } else {
                                JOptionPane.showMessageDialog(null, "Libro no existente");
                            }
                            break;
                        }
                    }
                    break;

                case 3:
                    Iterator<profesor> lstProfesores = listaProfesores.iterator();
                    while (lstProfesores.hasNext()) {
                        profesor profesores;
                        profesores = lstProfesores.next();
                        if (profesores.getMarca() == Integer.parseInt(txtIDDevolucion.getText().replaceAll("-", ""))) {
                            if (profesores.listaLibroProfesor.size() >= Integer.parseInt(txtLibroDevolver.getText()) - 1) {
                                String libroDevolver;
                                libroDevolver = tbLibrosPrestados.getValueAt(Integer.parseInt(txtLibroDevolver.getText()) - 1, 4).toString();
                                Iterator<libro> li = listaLibros.iterator();
                                while (li.hasNext()) {
                                    libro datosLibro;
                                    datosLibro = li.next();
                                    if (datosLibro.getNombrelibro().equals(libroDevolver)) {
                                        datosLibro.setClibrosdisponibles(datosLibro.getClibrosdisponibles() + 1);
                                        mostrardatosLibro();
                                        break;
                                    }
                                }
                                profesores.listaLibroProfesor.remove(Integer.parseInt(txtLibroDevolver.getText()) - 1);
                                JOptionPane.showMessageDialog(null, "Libro devuelto");
                                buscarLibrosPrestado();
                            } else {
                                JOptionPane.showMessageDialog(null, "Libro no existente");
                            }
                            break;
                        }
                    }
                    break;

                case 0:
                    JOptionPane.showMessageDialog(null, "Usuario no existente");
                    break;
            }
        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }
    }

    public void buscarLibrosPrestado() {
        try {
            int usuario;
            usuario = verificarUsuarioExistente(Integer.parseInt(txtIDDevolucion.getText().replaceAll("-", "")));
            switch (usuario) {
                case 1:
                    Iterator<estudiante> lstEstudiante = listaEstudiantes.iterator();
                    while (lstEstudiante.hasNext()) {
                        estudiante estdiante;
                        estdiante = lstEstudiante.next();
                        if (Integer.parseInt(estdiante.getCarnet()) == Integer.parseInt(txtIDDevolucion.getText().replaceAll("-", ""))) {
                            estdiante.librosPrestados();

                            DefaultTableModel modelo = new DefaultTableModel();
                            modelo.addColumn("N° LIBROS");
                            modelo.addColumn("CARNET");
                            modelo.addColumn("NOMBRE");
                            modelo.addColumn("APELLIDO");
                            modelo.addColumn("LIBRO");

                            tbLibrosPrestados.setModel(modelo);
                            Iterator<Object> prestados = estdiante.listaLibroEstudiante.iterator();
                            Object[] datos = new Object[5];
                            int i = 1;
                            while (prestados.hasNext()) {
                                Object datosEstudiante;
                                datosEstudiante = prestados.next();
                                String[] parts = (datosEstudiante).toString().split(",");
                                datos[0] = i;
                                datos[1] = parts[0];
                                datos[2] = parts[1];
                                datos[3] = parts[2];
                                datos[4] = parts[3];
                                modelo.addRow(datos);
                                i++;
                            }
                            tbLibrosPrestados.setModel(modelo);
                            break;
                        }
                    }
                    break;

                case 2:
                    Iterator<funcionario> lstFuncionarios = listaFuncionarios.iterator();
                    while (lstFuncionarios.hasNext()) {
                        funcionario funcionarios;
                        funcionarios = lstFuncionarios.next();
                        if (Integer.parseInt(funcionarios.getNumempleado()) == Integer.parseInt(txtIDDevolucion.getText().replaceAll("-", ""))) {
                            funcionarios.librosPrestados();

                           
                            DefaultTableModel modelo = new DefaultTableModel();
                            modelo.addColumn("N° LIBROS");
                            modelo.addColumn("N° EMPLEADO");
                            modelo.addColumn("NOMBRE");
                            modelo.addColumn("APELLIDO");
                            modelo.addColumn("LIBRO");

                            tbLibrosPrestados.setModel(modelo);
                            Iterator<Object> prestados = funcionarios.listaLibroFuncionario.iterator();
                           
                            Object[] datos = new Object[5];
                            int i = 1;
                            while (prestados.hasNext()) {
                                Object datosEstudiante;
                                datosEstudiante = prestados.next();
                                String[] parts = (datosEstudiante).toString().split(",");
                                datos[0] = i;
                                datos[1] = parts[0];
                                datos[2] = parts[1];
                                datos[3] = parts[2];
                                datos[4] = parts[3];
                                modelo.addRow(datos);
                                i++;
                            }
                            tbLibrosPrestados.setModel(modelo);
                            break;
                        }
                    }
                    break;

                case 3:
                    Iterator<profesor> lstProfesores = listaProfesores.iterator();
                    while (lstProfesores.hasNext()) {
                        profesor profesores;
                        profesores = lstProfesores.next();
                        if (profesores.getMarca() == Integer.parseInt(txtIDDevolucion.getText().replaceAll("-", ""))) {
                            profesores.librosPrestados();
                            DefaultTableModel modelo = new DefaultTableModel();
                            modelo.addColumn("N° LIBROS");
                            modelo.addColumn("ID MARCA");
                            modelo.addColumn("NOMBRE");
                            modelo.addColumn("APELLIDO");
                            modelo.addColumn("LIBRO");

                            tbLibrosPrestados.setModel(modelo);
                            Iterator<Object> prestados = profesores.listaLibroProfesor.iterator();
                            Object[] datos = new Object[5];
                            int i = 1;
                            while (prestados.hasNext()) {
                                Object datosEstudiante;
                                datosEstudiante = prestados.next();
                               
                                String[] parts = (datosEstudiante).toString().split(",");
                                datos[0] = i;
                                datos[1] = parts[0];
                                datos[2] = parts[1];
                                datos[3] = parts[2];
                                datos[4] = parts[3];
                                modelo.addRow(datos);
                                i++;
                            }
                            tbLibrosPrestados.setModel(modelo);
                            break;
                        }
                    }
                    break;

                case 0:
                    JOptionPane.showMessageDialog(null, "Usuario no existente");
                    break;
            }
        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }
    }

    public void guardarLibroPrestado() {
        try {
            int usuario;
            usuario = verificarUsuarioExistente(Integer.parseInt(txtIDPrestamo.getText().replaceAll("-", "")));
            libro datosLibro;
            switch (usuario) {
                case 1:
                    datosLibro = listaLibros.get(cmbLibros.getSelectedIndex());
                    if (datosLibro.getNombrelibro().equals(cmbLibros.getSelectedItem())) {
                        if (datosLibro.getClibrosdisponibles() > 0) {
                            Iterator<estudiante> lstEstudiante = listaEstudiantes.iterator();
                            while (lstEstudiante.hasNext()) {
                                estudiante estdiante;
                                estdiante = lstEstudiante.next();
                                if (Integer.parseInt(estdiante.getCarnet()) == Integer.parseInt(txtIDPrestamo.getText().replaceAll("-", ""))) {
                                    String libroPrestado;
                                    libroPrestado = (estdiante.getCarnet() + "," + estdiante.getNombre() + "," + estdiante.getApellido() + "," + datosLibro.getNombrelibro());
                                    estdiante.listaLibroEstudiante.add(libroPrestado);
                                    txtIDPrestamo.setText("");
                                    datosLibro.setClibrosdisponibles(datosLibro.getClibrosdisponibles() - 1);
                                    JOptionPane.showMessageDialog(null, "Libro prestado");
                                    mostrardatosLibro();

                                    break;

                                }
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "No hay libros suficientes");
                        }
                    }

                    break;

                case 2:
                    datosLibro = listaLibros.get(cmbLibros.getSelectedIndex());
                    if (datosLibro.getNombrelibro().equals(cmbLibros.getSelectedItem())) {
                        if (datosLibro.getClibrosdisponibles() > 0) {
                            Iterator<funcionario> lstFuncionario = listaFuncionarios.iterator();
                            while (lstFuncionario.hasNext()) {
                                funcionario funcionarios;
                                funcionarios = lstFuncionario.next();
                                if (Integer.parseInt(funcionarios.getNumempleado()) == Integer.parseInt(txtIDPrestamo.getText().replaceAll("-", ""))) {
                                    String libroPrestado;
                                    libroPrestado = (funcionarios.getNumempleado() + "," + funcionarios.getNombre() + "," + funcionarios.getApellido() + "," + datosLibro.getNombrelibro());
                                    funcionarios.listaLibroFuncionario.add(libroPrestado);
                                    datosLibro.setClibrosdisponibles(datosLibro.getClibrosdisponibles() - 1);
                                    JOptionPane.showMessageDialog(null, "Libro prestado");
                                    mostrardatosLibro();
                                    txtIDPrestamo.setText("");
                                    break;

                                }
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "No hay libros suficientes");
                        }
                    }
                    break;

                case 3:
                    datosLibro = listaLibros.get(cmbLibros.getSelectedIndex());
                    if (datosLibro.getNombrelibro().equals(cmbLibros.getSelectedItem())) {
                        if (datosLibro.getClibrosdisponibles() > 0) {
                            Iterator<profesor> lstProfesores = listaProfesores.iterator();
                            while (lstProfesores.hasNext()) {
                                profesor profesores;
                                profesores = lstProfesores.next();
                                if (profesores.getMarca() == Integer.parseInt(txtIDPrestamo.getText().replaceAll("-", ""))) {
                                    String libroPrestado;
                                    libroPrestado = (profesores.getMarca() + "," + profesores.getNombre() + "," + profesores.getApellido() + "," + datosLibro.getNombrelibro());
                                    profesores.listaLibroProfesor.add(libroPrestado);
                                    datosLibro.setClibrosdisponibles(datosLibro.getClibrosdisponibles() - 1);
                                    JOptionPane.showMessageDialog(null, "Libro prestado");
                                    mostrardatosLibro();
                                    txtIDPrestamo.setText("");
                                    break;
                                }
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "No hay libros suficientes");
                        }
                    }
                    break;

                case 0:
                    JOptionPane.showMessageDialog(null, "Usuario no existente");
                    break;
            }
        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }

    }

    public void guardarLibro() {
        boolean guardar;
        guardar = verificarLibroteExistente(txtNombreLibro.getText());
        try {
            if (guardar == false) {
                libro newlibro = new libro(txtNombreLibro.getText(), txtAñoPublicacionLibro.getText(), txtEditorialLibro.getText(), cmbAutores.getSelectedItem().toString(), Integer.parseInt(spnLibrosUniversidad.getValue().toString()), Integer.parseInt(spnLibrosUniversidad.getValue().toString()));
                cmbLibros.addItem(txtNombreLibro.getText());
                listaLibros.add(newlibro);
                mostrardatosLibro();
                txtNombreLibro.setText("");
                txtEditorialLibro.setText("");
                txtAñoPublicacionLibro.setText("");
                cmbAutores.setSelectedIndex(0);
                spnLibrosUniversidad.setValue(1);
                JOptionPane.showMessageDialog(null, "Libro registrado");

            } else {
                JOptionPane.showMessageDialog(null, "Libro existente");
            }

        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }

    }

    public void guardarAutor() {

        boolean guardar;
        guardar = verificarAutorExistente(txtNombreAutor.getText(), txtApellidosAutor.getText());
        try {
            if (guardar == false) {
                boolean vivo;
                if (chbVivoAutor.isSelected()) {
                    vivo = true;
                } else {
                    vivo = false;
                }
                cmbAutores.addItem(txtNombreAutor.getText() + " " + txtApellidosAutor.getText());
                autor newautor = new autor(txtNombreAutor.getText(), txtApellidosAutor.getText(), txtEmailAutor.getText(), Integer.parseInt(txtTelefonoAutor.getText().replaceAll("-", "")), txtSedeAutor.getText(), txtNacionalidadAutor.getText(), vivo, Integer.parseInt(spnLibrosProducidosAutor.getValue().toString()));
                listaAutor.add(newautor);
                txtNombreAutor.setText("");
                txtApellidosAutor.setText("");
                txtEmailAutor.setText("");
                txtTelefonoAutor.setText("");
                txtSedeAutor.setText("");
                txtNacionalidadAutor.setText("");
                chbVivoAutor.setSelected(false);
                spnLibrosProducidosAutor.setValue(1);
                mostrardatosAutor();
                JOptionPane.showMessageDialog(null, "Autor registrado");
            } else {
                JOptionPane.showMessageDialog(null, "Autor ya existente");
            }
        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }

    }

    public void guardarProfesor() {

        int guardar;
        guardar = verificarUsuarioExistente(Integer.parseInt(txtIDMarcaProfesor.getText().replaceAll("-", "")));
        try {
            if (guardar == 0) {
                profesor newprofesor = new profesor(txtNombreProfesor.getText(), txtApellidosProfesor.getText(), txtCorreoProfesor.getText(), Integer.parseInt(txtTelefonoProfesor.getText().replaceAll("-", "")), txtSedeProfesor.getText(), Integer.parseInt(txtIDMarcaProfesor.getText().replaceAll("-", "")), Integer.parseInt(spnCantidadCursosProfesor.getValue().toString()));
                listaProfesores.add(newprofesor);
                mostrardatosProfesor();
                txtIDMarcaProfesor.setText("");
                txtNombreProfesor.setText("");
                txtApellidosProfesor.setText("");
                txtCorreoProfesor.setText("");
                txtTelefonoProfesor.setText("");
                txtSedeProfesor.setText("");
                spnCantidadCursosProfesor.setValue(1);
                ;
                JOptionPane.showMessageDialog(null, "Profesor registrado");
            } else {
                JOptionPane.showMessageDialog(null, "Identifación ya existente");
            }
        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }

    }

    public void guardarFuncionario() {

        int guardar;

        guardar = verificarUsuarioExistente(Integer.parseInt(txtIDEmpleado.getText().replaceAll("-", "")));
        try {
            if (guardar == 0) {
                funcionario newfunctionary = new funcionario(txtNombreEmpleado.getText(), txtApellidosEmpleado.getText(), txtEmailEmpleado.getText(), Integer.parseInt(txtTelefonoEmpleado.getText().replaceAll("-", "")), txtSedeEmpleado.getText(), txtIDEmpleado.getText().replaceAll("-", ""), txtPuestoEmpleado.getText(), txtDepartamentoEmpleado.getText());
                listaFuncionarios.add(newfunctionary);
                mostrardatosFuncionario();
                txtIDEmpleado.setText("");
                txtNombreEmpleado.setText("");
                txtApellidosEmpleado.setText("");
                txtEmailEmpleado.setText("");
                txtTelefonoEmpleado.setText("");
                txtSedeEmpleado.setText("");
                txtPuestoEmpleado.setText("");
                txtDepartamentoEmpleado.setText("");
                JOptionPane.showMessageDialog(null, "Funcionario registrado");
            } else {
                JOptionPane.showMessageDialog(null, "Identifación ya existente");
            }
        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }

    }

    public void guardarEstudiante() {

        int guardar;

        guardar = verificarUsuarioExistente(Integer.parseInt(txtCarnet.getText().replaceAll("-", "")));
        try {
            if (guardar == 0) {
                boolean activo;
                activo = chbActivo.isSelected();

                estudiante newstudent = new estudiante(txtCarnet.getText().replaceAll("-", ""), txtCarrera.getText(), activo, txt_NombreEstudiante.getText(), txt_ApellidoEstudiante.getText(), txt_EmailEstudiante.getText(), Integer.parseInt(txtTelefonoEstudiante.getText().replaceAll("-", "")), txtSedeEstudiante.getText());
                listaEstudiantes.add(newstudent);
                mostrardatosEstudiante();
                txtCarnet.setText("");
                txtCarrera.setText("");
                txt_NombreEstudiante.setText("");
                txt_ApellidoEstudiante.setText("");
                txt_EmailEstudiante.setText("");
                txtTelefonoEstudiante.setText("");
                txtSedeEstudiante.setText("");
                chbActivo.setSelected(false);
                JOptionPane.showMessageDialog(null, "Estudiante registrado");
            } else {
                JOptionPane.showMessageDialog(null, "Identifación ya existente");
            }
        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }

    }

    public int verificarUsuarioExistente(int identificacion) {
        int existe = 0;
        try {
            Iterator<estudiante> listEstudiante = listaEstudiantes.iterator();
            while (listEstudiante.hasNext()) {
                if (Integer.parseInt(listEstudiante.next().getCarnet()) == identificacion) {
                    existe = 1;
                    break;
                }
            }

            if (existe == 0) {
                Iterator<funcionario> listFuncionarios = listaFuncionarios.iterator();
                while (listFuncionarios.hasNext()) {
                    if (Integer.parseInt(listFuncionarios.next().getNumempleado()) == identificacion) {
                        existe = 2;
                        break;
                    }
                }
            }

            if (existe == 0) {
                Iterator<profesor> listProfesores = listaProfesores.iterator();
                while (listProfesores.hasNext()) {
                    if (listProfesores.next().getMarca() == identificacion) {
                        existe = 3;
                    }
                }
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }

        return existe;
    }

    public boolean verificarLibroteExistente(String nombreLibro) {
        boolean existe = false;
        try {
            Iterator<libro> li = listaLibros.iterator();

            while (li.hasNext()) {
                if (li.next().getNombrelibro().equals(nombreLibro)) {
                    existe = true;
                } else {
                    existe = false;
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }

        return existe;
    }

    public boolean verificarEstudianteExistente(int identificacion) {
        boolean existe = false;
        try {
            Iterator<estudiante> li = listaEstudiantes.iterator();

            while (li.hasNext()) {
                if (Integer.parseInt(li.next().getCarnet()) == identificacion) {
                    existe = true;
                } else {
                    existe = false;
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }

        return existe;
    }

    public boolean verificarFuncionarioExistente(int identificacion) {
        boolean existe = false;
        try {
            Iterator<funcionario> li = listaFuncionarios.iterator();

            while (li.hasNext()) {
                if (Integer.parseInt(li.next().getNumempleado()) == identificacion) {
                    existe = true;
                } else {
                    existe = false;
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }

        return existe;
    }

    public boolean verificarProfesorExistente(int identificacion) {
        boolean existe = false;
        try {
            Iterator<profesor> li = listaProfesores.iterator();

            while (li.hasNext()) {
                if (li.next().getMarca() == identificacion) {
                    existe = true;
                } else {
                    existe = false;
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }

        return existe;
    }

    public boolean verificarAutorExistente(String p_nombre, String p_apellido) {
        boolean existe = false;
        try {
            Iterator<autor> li = listaAutor.iterator();

            while (li.hasNext()) {
                autor busqueda;
                busqueda = li.next();
                if (busqueda.getNombre().equals(p_nombre) && busqueda.getApellido().equals(p_apellido)) {
                    existe = true;
                } else {
                    existe = false;
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }

        return existe;
    }

    public void eliminarAutor() {
        boolean eliminar = false;

        eliminar = verificarAutorExistente(txtNombreAutor.getText(), txtApellidosAutor.getText());
        try {

            Iterator<autor> li = listaAutor.iterator();
            while (li.hasNext()) {
                autor busqueda;
                busqueda = li.next();
                if (busqueda.getNombre().equals(txtNombreAutor.getText()) && busqueda.getApellido().equals(txtApellidosAutor.getText())) {
                    li.remove();
                    eliminar = true;
                }
            }
            if (eliminar == true) {
                JOptionPane.showMessageDialog(null, "Autor eliminado ");
            } else {
                JOptionPane.showMessageDialog(null, "Registro no existe");
            }
        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }

        mostrardatosAutor();
    }

    public void eliminarProfesor() {
        boolean eliminar = false;

        eliminar = verificarFuncionarioExistente(Integer.parseInt(txtIDMarcaProfesor.getText().replaceAll("-", "")));
        try {

            Iterator<profesor> li = listaProfesores.iterator();
            while (li.hasNext()) {
                if (li.next().getMarca() == Integer.parseInt(txtIDMarcaProfesor.getText().replaceAll("-", ""))) {
                    li.remove();
                    eliminar = true;
                }
            }
            if (eliminar == true) {
                JOptionPane.showMessageDialog(null, "Profesor eliminado ");
            } else {
                JOptionPane.showMessageDialog(null, "Registro no existe");
            }
        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }

        mostrardatosProfesor();
    }

    public void eliminarFuncionario() {
        boolean eliminar = false;

        eliminar = verificarFuncionarioExistente(Integer.parseInt(txtIDEmpleado.getText().replaceAll("-", "")));
        try {

            Iterator<funcionario> li = listaFuncionarios.iterator();
            while (li.hasNext()) {
                if (Integer.parseInt(li.next().getNumempleado()) == Integer.parseInt(txtIDEmpleado.getText().replaceAll("-", ""))) {
                    li.remove();
                    eliminar = true;
                }
            }
            if (eliminar == true) {
                JOptionPane.showMessageDialog(null, "Funcionario eliminado ");
            } else {
                JOptionPane.showMessageDialog(null, "Registro no existe");
            }
        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }

        mostrardatosFuncionario();
    }

    public void eliminarEstudiante() {
        boolean eliminar = false;

        eliminar = verificarEstudianteExistente(Integer.parseInt(txtCarnet.getText().replaceAll("-", "")));
        try {

            Iterator<estudiante> li = listaEstudiantes.iterator();
            while (li.hasNext()) {
                if (Integer.parseInt(li.next().getCarnet()) == Integer.parseInt(txtCarnet.getText().replaceAll("-", ""))) {
                    li.remove();
                    eliminar = true;
                }
            }
            if (eliminar == true) {
                JOptionPane.showMessageDialog(null, "Estudiante eliminado ");
            } else {
                JOptionPane.showMessageDialog(null, "Registro no existe");
            }
        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }

        mostrardatosEstudiante();
    }

    public void mostrardatosEstudiante() {
        try {
            DefaultTableModel modelo = new DefaultTableModel();
            modelo.addColumn("CARNET");
            modelo.addColumn("NOMBRE");
            modelo.addColumn("APELLIDO");
            modelo.addColumn("EMAIL");
            modelo.addColumn("TELEFONO");
            modelo.addColumn("SEDE");
            modelo.addColumn("CARRERA");
            modelo.addColumn("ACTIVO");

            tbEstudiante.setModel(modelo);
            Iterator<estudiante> li = listaEstudiantes.iterator();
            Object[] datos = new Object[8];
            while (li.hasNext()) {
                estudiante datosEstudiante;
                datosEstudiante = li.next();
                datos[0] = datosEstudiante.getCarnet();
                datos[1] = datosEstudiante.getNombre();
                datos[2] = datosEstudiante.getApellido();
                datos[3] = datosEstudiante.getCorreo();
                datos[4] = Integer.toString(datosEstudiante.getTelefono());
                datos[5] = datosEstudiante.getSede();
                datos[6] = datosEstudiante.getCarrera();
                if (datosEstudiante.getActivo() == true) {
                    datos[7] = "Activo";
                } else {
                    datos[7] = "Inactivo";
                }
                modelo.addRow(datos);
            }
            tbEstudiante.setModel(modelo);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }

    }

    public void mostrardatosFuncionario() {
        try {
            DefaultTableModel modelo = new DefaultTableModel();
            modelo.addColumn("ID EMPLEADO");
            modelo.addColumn("NOMBRE");
            modelo.addColumn("APELLIDOS");
            modelo.addColumn("EMAIL");
            modelo.addColumn("TELEFONO");
            modelo.addColumn("SEDE");
            modelo.addColumn("PUESTO");
            modelo.addColumn("DEPARTAMENTO");

            tbEmpleado.setModel(modelo);
            Iterator<funcionario> li = listaFuncionarios.iterator();
            Object[] datos = new Object[8];
            while (li.hasNext()) {
                funcionario datosFuncionario;
                datosFuncionario = li.next();
                datos[0] = datosFuncionario.getNumempleado();
                datos[1] = datosFuncionario.getNombre();
                datos[2] = datosFuncionario.getApellido();
                datos[3] = datosFuncionario.getCorreo();
                datos[4] = Integer.toString(datosFuncionario.getTelefono());
                datos[5] = datosFuncionario.getSede();
                datos[6] = datosFuncionario.getPuesto();
                datos[7] = datosFuncionario.getDepartamento();
                modelo.addRow(datos);
            }
            tbEmpleado.setModel(modelo);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }

    }

    public void mostrardatosProfesor() {
        try {
            DefaultTableModel modelo = new DefaultTableModel();
            modelo.addColumn("ID MARCA");
            modelo.addColumn("NOMBRE");
            modelo.addColumn("APELLIDOS");
            modelo.addColumn("EMAIL");
            modelo.addColumn("TELEFONO");
            modelo.addColumn("SEDE");
            modelo.addColumn("CANTIDAD CURSOS");

            tbProfesor.setModel(modelo);
            Iterator<profesor> li = listaProfesores.iterator();
            Object[] datos = new Object[8];
            while (li.hasNext()) {
                profesor datosProfesor;
                datosProfesor = li.next();
                datos[0] = datosProfesor.getMarca();
                datos[1] = datosProfesor.getNombre();
                datos[2] = datosProfesor.getApellido();
                datos[3] = datosProfesor.getCorreo();
                datos[4] = Integer.toString(datosProfesor.getTelefono());
                datos[5] = datosProfesor.getSede();
                datos[6] = datosProfesor.getCcurso();
                modelo.addRow(datos);
            }
            tbProfesor.setModel(modelo);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }

    }

    public void mostrardatosAutor() {
        try {
            DefaultTableModel modelo = new DefaultTableModel();
            modelo.addColumn("NOMBRE");
            modelo.addColumn("APELLIDOS");
            modelo.addColumn("EMAIL");
            modelo.addColumn("TELEFONO");
            modelo.addColumn("SEDE");
            modelo.addColumn("NACIONALIDAD");
            modelo.addColumn("VIVO");
            modelo.addColumn("LIBROS PUBLICADOS");

            tbAutor.setModel(modelo);
            Iterator<autor> li = listaAutor.iterator();
            Object[] datos = new Object[8];
            while (li.hasNext()) {
                autor datosAutor;
                datosAutor = li.next();
                datos[0] = datosAutor.getNombre();
                datos[1] = datosAutor.getApellido();
                datos[2] = datosAutor.getCorreo();
                datos[3] = Integer.toString(datosAutor.getTelefono());
                datos[4] = datosAutor.getSede();
                datos[5] = datosAutor.getNacionalidad();
                datos[6] = datosAutor.getVivo();
                datos[7] = datosAutor.getClibrosautor();
                modelo.addRow(datos);
            }
            tbAutor.setModel(modelo);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }

    }

    public void mostrardatosLibro() {
        try {
            DefaultTableModel modelo = new DefaultTableModel();
            modelo.addColumn("NOMBRE LIBRO");
            modelo.addColumn("AUTOR");
            modelo.addColumn("AÑO PUBLICACIÓN");
            modelo.addColumn("EDITORIAL");
            modelo.addColumn("CANTIDAD LIBROS UNIVERSIDAD");
            modelo.addColumn("CANTIDAD DISPONIBLES");

            tbLibro.setModel(modelo);
            Iterator<libro> li = listaLibros.iterator();
            Object[] datos = new Object[6];
            while (li.hasNext()) {
                libro datosLibro;
                datosLibro = li.next();
                datos[0] = datosLibro.getNombrelibro();
                datos[1] = datosLibro.getAutor();
                datos[2] = datosLibro.getAñopublicacion();
                datos[3] = datosLibro.getEditorial();
                datos[4] = datosLibro.getClibrosuniversidad();
                datos[5] = datosLibro.getClibrosdisponibles();
                modelo.addRow(datos);
            }
            tbLibro.setModel(modelo);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmBiblioteca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmBiblioteca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmBiblioteca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmBiblioteca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmBiblioteca().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarPrestados;
    private javax.swing.JButton btnDevolver;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnEliminarEmpleado;
    private javax.swing.JButton btnEliminarProfesor;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnGuardarAutor;
    private javax.swing.JButton btnGuardarEmpleado;
    private javax.swing.JButton btnGuardarLibro;
    private javax.swing.JButton btnGuardarProfesor;
    private javax.swing.JButton btnSolicitarLibro;
    private javax.swing.JCheckBox chbActivo;
    private javax.swing.JCheckBox chbVivoAutor;
    private javax.swing.JComboBox<String> cmbAutores;
    private javax.swing.JComboBox<String> cmbLibros;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jtpBiblioteca;
    private javax.swing.JLabel lbIDDevolucion;
    private javax.swing.JLabel lblApellidoEstudiante;
    private javax.swing.JLabel lblApellidosAutor;
    private javax.swing.JLabel lblApellidosFuncionario;
    private javax.swing.JLabel lblApellidosProfesor;
    private javax.swing.JLabel lblAutorLibro;
    private javax.swing.JLabel lblAñoLibro;
    private javax.swing.JLabel lblCantidadCursos;
    private javax.swing.JLabel lblCantidadLibro;
    private javax.swing.JLabel lblCarnetEstudiante;
    private javax.swing.JLabel lblCarrera;
    private javax.swing.JLabel lblDepartamentoFuncionario;
    private javax.swing.JLabel lblEditorialLibro;
    private javax.swing.JLabel lblEmailAutor;
    private javax.swing.JLabel lblEmailEstudiante;
    private javax.swing.JLabel lblEmailFuncionario;
    private javax.swing.JLabel lblEmailProfesor;
    private javax.swing.JLabel lblIDMarcaProfesor;
    private javax.swing.JLabel lblLibroDevolucion;
    private javax.swing.JLabel lblLibrosPrestamo;
    private javax.swing.JLabel lblLibrosProducidosAutor;
    private javax.swing.JLabel lblNacionalidadAutor;
    private javax.swing.JLabel lblNombreAutor;
    private javax.swing.JLabel lblNombreEstudiante;
    private javax.swing.JLabel lblNombreFuncionario;
    private javax.swing.JLabel lblNombreLibro;
    private javax.swing.JLabel lblNombreProfesor;
    private javax.swing.JLabel lblPuestoFuncionario;
    private javax.swing.JLabel lblSedeAutor;
    private javax.swing.JLabel lblSedeEstudiante;
    private javax.swing.JLabel lblSedeFuncionario;
    private javax.swing.JLabel lblSedeProfesor;
    private javax.swing.JLabel lblSolicitantePrestamo;
    private javax.swing.JLabel lblTelefonoAutor;
    private javax.swing.JLabel lblTelefonoEstudiante;
    private javax.swing.JLabel lblTelefonoFuncionario;
    private javax.swing.JLabel lblTelefonoProfesor;
    private javax.swing.JLabel lblVivoAutor;
    private javax.swing.JPanel pnlAutor;
    private javax.swing.JPanel pnlEstudiante;
    private javax.swing.JPanel pnlFuncionario;
    private javax.swing.JPanel pnlLibro;
    private javax.swing.JPanel pnlPrestamoDevolucion;
    private javax.swing.JPanel pnlProfesor;
    private javax.swing.JSpinner spnCantidadCursosProfesor;
    private javax.swing.JSpinner spnLibrosProducidosAutor;
    private javax.swing.JSpinner spnLibrosUniversidad;
    private javax.swing.JTable tbAutor;
    private javax.swing.JTable tbEmpleado;
    private javax.swing.JTable tbEstudiante;
    private javax.swing.JTable tbLibro;
    private javax.swing.JTable tbLibrosPrestados;
    private javax.swing.JTable tbProfesor;
    private javax.swing.JTextField txtApellidosAutor;
    private javax.swing.JTextField txtApellidosEmpleado;
    private javax.swing.JTextField txtApellidosProfesor;
    private javax.swing.JFormattedTextField txtAñoPublicacionLibro;
    private javax.swing.JFormattedTextField txtCarnet;
    private javax.swing.JTextField txtCarrera;
    private javax.swing.JTextField txtCorreoProfesor;
    private javax.swing.JTextField txtDepartamentoEmpleado;
    private javax.swing.JTextField txtEditorialLibro;
    private javax.swing.JTextField txtEmailAutor;
    private javax.swing.JTextField txtEmailEmpleado;
    private javax.swing.JFormattedTextField txtIDDevolucion;
    private javax.swing.JFormattedTextField txtIDEmpleado;
    private javax.swing.JLabel txtIDFuncionario;
    private javax.swing.JFormattedTextField txtIDMarcaProfesor;
    private javax.swing.JFormattedTextField txtIDPrestamo;
    private javax.swing.JTextField txtLibroDevolver;
    private javax.swing.JTextField txtNacionalidadAutor;
    private javax.swing.JTextField txtNombreAutor;
    private javax.swing.JTextField txtNombreEmpleado;
    private javax.swing.JTextField txtNombreLibro;
    private javax.swing.JTextField txtNombreProfesor;
    private javax.swing.JTextField txtPuestoEmpleado;
    private javax.swing.JTextField txtSedeAutor;
    private javax.swing.JTextField txtSedeEmpleado;
    private javax.swing.JTextField txtSedeEstudiante;
    private javax.swing.JTextField txtSedeProfesor;
    private javax.swing.JFormattedTextField txtTelefonoAutor;
    private javax.swing.JFormattedTextField txtTelefonoEmpleado;
    private javax.swing.JFormattedTextField txtTelefonoEstudiante;
    private javax.swing.JFormattedTextField txtTelefonoProfesor;
    private javax.swing.JTextField txt_ApellidoEstudiante;
    private javax.swing.JTextField txt_EmailEstudiante;
    private javax.swing.JTextField txt_NombreEstudiante;
    // End of variables declaration//GEN-END:variables
}
